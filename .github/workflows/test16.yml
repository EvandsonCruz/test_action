name: validar-colunas-duplicadas
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - edited
    paths-ignore:
      - '.github/workflows/**'

jobs:
  validar-colunas:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do repositório
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Configurar variável de ambiente GH_TOKEN
      run: echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV 

    - name: Obter conteúdo do pull request
      id: obter-conteudo
      run: |
        encontrada=false
        saida=""

        echo "Pull request acabou de ser aberto. Verificando novos arquivos adicionados."

        # Obtém a lista de arquivos adicionados no pull request
        arquivos_adicionados=($(git diff --name-only HEAD^1))
        echo "Arquivos adicionados: ${arquivos_adicionados[@]}"

        for arquivo in "${arquivos_adicionados[@]}"; do
          echo "Verificando o arquivo: $arquivo"

          # Validação de colunas duplicadas em CREATE TABLE
          if grep -Ei -q 'create table' "$arquivo"; then
            echo "Validando colunas duplicadas em: $arquivo"
            duplicadas=$(awk '/CREATE TABLE/,/\);/ {if ($1 != "" && $2 != "") print $1}' "$arquivo" | sort | uniq -d | tr '\n' ', ' | sed 's/, $/, /g' | sed 's/, $//')
            if [[ -n "$duplicadas" ]]; then
                echo "O arquivo $arquivo tem colunas duplicadas: $duplicadas"
                encontrada=true
                saida+="$arquivo: Colunas duplicadas encontradas: $duplicadas"
            else
                echo "Nenhuma coluna duplicada encontrada no arquivo $arquivo."
            fi
          fi
        done

        if [ "$encontrada" == true ]; then
          echo "::error::Erros encontrados no PR"
          SLACK_MESSAGE="Erros encontrados no PR - ${{ github.event.number }} - github.com/${GITHUB_REPOSITORY}/pull/${{ github.event.number }}/files (${{ github.base_ref }})\n$saida"
          curl -X POST -H 'Content-type: application/json' --data '{"text":"'"$SLACK_MESSAGE"'"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          PR_NUMBER=$(echo "${{ github.event.pull_request.html_url }}" | awk -F'/' '{print $NF}')
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d '/' -f 1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          AUTHOR_NAME=${{ github.event.pull_request.user.login }}
          gh pr comment $PR_NUMBER -R $REPO_OWNER/$REPO_NAME --body "@$AUTHOR_NAME
          Erros encontrados no PR:
          ${saida}
          Por favor revisar"
          exit 1
        else
          echo "PR OK"
        fi
