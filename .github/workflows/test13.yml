name: Validar colunas auditoria e verificar conteúdo
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - edited

jobs:
  validar-colunas:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do repositório
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Configurar variável de ambiente GH_TOKEN
      run: echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV 

    - name: Obter lista de arquivos alterados e verificar colunas de auditoria
      run: |
        problemas=false
        mensagem_erro=""

        colunas=("DT_ATLZ" "DT_CRIACAO" "USUARIO_CRIACAO" "USUARIO_ATUALIZACAO")
        arquivos_alterados=$(git diff --name-only HEAD^1)

        for arquivo in $arquivos_alterados; do
          if grep -qiE 'CREATE TABLE' "$arquivo"; then
            colunas_faltando=()
            for coluna in "${colunas[@]}"; do
              if ! grep -qiE "$coluna" "$arquivo"; então
                problemas=true
                colunas_faltando+=("$coluna")
              fi
            done
            if [ ${#colunas_faltando[@]} -ne 0 ]; então
              colunas_faltando_str=$(IFS=, ; echo "${colunas_faltando[*]}" | sed 's/, /, /g')
              mensagem_erro+="Arquivo: $arquivo, Colunas faltando: $colunas_faltando_str\n"
            fi
          fi
        done

        if [ "$problemas" = true ]; então
          mensagem_erro=$(echo -e "$mensagem_erro" | sed 's/\n$//')

          echo "::error::A criação de tabela não tem todos os campos de auditoria necessários: $mensagem_erro"

          SLACK_MESSAGE="PR ${{ github.event.number }} - github.com/${{ github.repository }}/pull/${{ github.event.number }}/files (${{ github.base_ref }})\n\nA criação da tabela nos seguintes arquivos não tem todos os campos de auditoria necessários:\n$mensagem_erro"

          curl -X POST -H 'Content-type: application/json' --data '{"text":"'"$SLACK_MESSAGE"'"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          
          PR_NUMBER=$(echo "${{ github.event.pull_request.html_url }}" | awk -F'/' '{print $NF}')
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d '/' -f 1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          AUTHOR_NAME=${{ github.event.pull_request.user.login }}
          
          gh pr comment $PR_NUMBER -R $REPO_OWNER/$REPO_NAME --body "@$AUTHOR_NAME

          A criação da tabela nos seguintes arquivos não tem todos os campos de auditoria necessários:

        $mensagem_erro"
          exit 1
        else
          echo "PR OK"
        fi

  verificar-conteudo:
    runs-on: ubuntu-latest
    needs: validar-colunas

    steps:
    - name: Checkout do repositório
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Configurar variável de ambiente GH_TOKEN
      run: echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV 

    - name: Verificar Conteúdo do PR
      run: |
        palavras_chave=("grant")  # Substitua pela lista de palavras-chave desejada
        outras_palavras=("to public")  # Substitua pela segunda lista de palavras 

        encontrada=false 
        saida=""

        echo ">>>>>>>>>antes do for>>>>>>>>>>> $encontrada"
        echo "#############################################################  ${{ github.event_name }}"
        echo "##########################opened###################################  ${{ github.event.action }}"
        
        if [ "${{ github.event.action }}" == "opened" ]; então
          echo "Pull request acabou de ser aberto. Verificando novos arquivos adicionados."

          # Obtém a lista de arquivos adicionados no pull request
          arquivos_adicionados=($(git diff --name-only HEAD^1))
          echo "##########################arquivos_adicionados###################################  $arquivos_adicionados"

          for arquivo em "${arquivos_adicionados[@]}"; então
            echo "Novo arquivo adicionado: $arquivo"

            # Restante do seu código para verificar palavras-chave e outras_palavras
            for palavra_chave em "${palavras_chave[@]}"; então
              if grep -q "$palavra_chave" "$arquivo"; então
                echo "Encontrada a palavra '$palavra_chave' no novo arquivo: $arquivo"
                for outra_palavra em "${outras_palavras[@]}"; então
                  if grep -q "$outra_palavra" "$arquivo"; então
                    echo "Encontrada a palavra '$outra_palavra' no mesmo arquivo: $arquivo"
                    encontrada=true
                    saida="$saida$palavra_chave $outra_palavra no arquivo $arquivo\n"
                  fi
                done
              fi
            done
          done
        else 
          for arquivo em $(git diff --name-only ${{ github.event.before }} ${{ github.sha }}); então
            for palavra_chave em "${palavras_chave[@]}"; então
              if grep -q "$palavra_chave" "$arquivo"; então
                echo "Encontrada a palavra '$palavra_chave' no arquivo: $arquivo"
                for outra_palavra em "${outras_palavras[@]}"; então
                  if grep -q "$outra_palavra" "$arquivo"; então
                    echo "Encontrada a palavra '$outra_palavra' no mesmo arquivo: $arquivo"
                    encontrada=true
                    saida="$saida$palavra_chave $outra_palavra no arquivo $arquivo\n"
                  fi
                done
              fi
            done
          done
        fi
        
        echo ">>>>>>>depois do for>>>>>>>>>>>>> $encontrada"

        if [ "$encontrada" == true ]; então
          SLACK_MESSAGE="Label 'bug' adicionada ao PR: ${{ github.event.number }} - github.com/${GITHUB_REPOSITORY}/pull/${{ github.event.number }}/files (${{ github.base_ref }})\n$saida"
          curl -X POST -H 'Content-type: application/json' --data '{"text":"'"$SLACK_MESSAGE"'"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          exit 1
        fi
